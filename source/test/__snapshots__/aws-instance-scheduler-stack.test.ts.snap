// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AwsInstanceSchedulerStack snapshot test 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "",
  "Mappings": Object {
    "Send": Object {
      "AnonymousUsage": Object {
        "Data": "Yes",
      },
      "ParameterKey": Object {
        "UniqueId": "/Solutions/aws-instance-scheduler/UUID/",
      },
    },
    "mappings": Object {
      "EnabledDisabled": Object {
        "No": "DISABLED",
        "Yes": "ENABLED",
      },
      "Services": Object {
        "Both": "ec2,rds",
        "EC2": "ec2",
        "RDS": "rds",
      },
      "Settings": Object {
        "MetricsSolutionId": "S00030",
        "MetricsUrl": "https://metrics.awssolutionsbuilder.com/generic",
      },
      "Timeouts": Object {
        "1": "cron(0/1 * * * ? *)",
        "10": "cron(0/10 * * * ? *)",
        "15": "cron(0/15 * * * ? *)",
        "2": "cron(0/2 * * * ? *)",
        "30": "cron(0/30 * * * ? *)",
        "5": "cron(0/5 * * * ? *)",
        "60": "cron(0 0/1 * * ? *)",
      },
      "TrueFalse": Object {
        "No": "False",
        "Yes": "True",
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Scheduler (version v1.4.0)",
          },
          "Parameters": Array [
            "TagName",
            "ScheduledServices",
            "ScheduleRdsClusters",
            "CreateRdsSnapshot",
            "SchedulingActive",
            "Regions",
            "DefaultTimezone",
            "CrossAccountRoles",
            "ScheduleLambdaAccount",
            "SchedulerFrequency",
            "MemorySize",
          ],
        },
        Object {
          "Label": Object {
            "default": "Options",
          },
          "Parameters": Array [
            "UseCloudWatchMetrics",
            "SendAnonymousData",
            "Trace",
          ],
        },
        Object {
          "Label": Object {
            "default": "Other parameters",
          },
          "Parameters": Array [
            "LogRetentionDays",
            "StartedTags",
            "StoppedTags",
          ],
        },
      ],
      "ParameterLabels": Object {
        "CreateRdsSnapshot": Object {
          "default": "Create RDS instance snapshot",
        },
        "CrossAccountRoles": Object {
          "default": "Cross-account roles",
        },
        "DefaultTimezone": Object {
          "default": "Default time zone",
        },
        "LogRetentionDays": Object {
          "default": "Log retention days",
        },
        "MemorySize": Object {
          "default": "Memory size",
        },
        "Regions": Object {
          "default": "Region(s)",
        },
        "ScheduleLambdaAccount": Object {
          "default": "This account",
        },
        "ScheduleRdsClusters": Object {
          "default": "Schedule Aurora Clusters",
        },
        "ScheduledServices": Object {
          "default": "Service(s) to schedule",
        },
        "SchedulerFrequency": Object {
          "default": "Frequency",
        },
        "SchedulingActive": Object {
          "default": "Scheduling enabled",
        },
        "SendAnonymousData": Object {
          "default": "Send anonymous usage data",
        },
        "StartedTags": Object {
          "default": "Started tags",
        },
        "StoppedTags": Object {
          "default": "Stopped tags",
        },
        "TagName": Object {
          "default": "Instance Scheduler tag name",
        },
        "Trace": Object {
          "default": "Enable CloudWatch Logs",
        },
        "UseCloudWatchMetrics": Object {
          "default": "Enable CloudWatch Metrics",
        },
      },
    },
  },
  "Outputs": Object {
    "AccountId": Object {
      "Description": "Account to give access to when creating cross-account access role for cross account scenario ",
      "Value": "111111111111",
    },
    "ConfigurationTable": Object {
      "Description": "Name of the DynamoDB configuration table",
      "Value": Object {
        "Fn::GetAtt": Array [
          "ConfigTable",
          "Arn",
        ],
      },
    },
    "IssueSnsTopicArn": Object {
      "Description": "Topic to subscribe to for notifications of errors and warnings",
      "Value": Object {
        "Ref": "InstanceSchedulerSnsTopic",
      },
    },
    "SchedulerRoleArn": Object {
      "Description": "Role for the instance scheduler lambda function",
      "Value": Object {
        "Fn::GetAtt": Array [
          "SchedulerRole",
          "Arn",
        ],
      },
    },
    "ServiceInstanceScheduleServiceToken": Object {
      "Description": "Arn to use as ServiceToken property for custom resource type Custom::ServiceInstanceSchedule",
      "Value": Object {
        "Fn::GetAtt": Array [
          "Main",
          "Arn",
        ],
      },
    },
  },
  "Parameters": Object {
    "CreateRdsSnapshot": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Create snapshot before stopping RDS instances (does not apply to Aurora Clusters).",
      "Type": "String",
    },
    "CrossAccountRoles": Object {
      "Description": "Comma separated list of ARN's for cross account access roles. These roles must be created in all checked accounts the scheduler to start and stop instances.",
      "Type": "CommaDelimitedList",
    },
    "DefaultTimezone": Object {
      "AllowedValues": Array [
        "Africa/Abidjan",
        "Africa/Accra",
        "Africa/Addis_Ababa",
        "Africa/Algiers",
        "Africa/Asmara",
        "Africa/Bamako",
        "Africa/Bangui",
        "Africa/Banjul",
        "Africa/Bissau",
        "Africa/Blantyre",
        "Africa/Brazzaville",
        "Africa/Bujumbura",
        "Africa/Cairo",
        "Africa/Casablanca",
        "Africa/Ceuta",
        "Africa/Conakry",
        "Africa/Dakar",
        "Africa/Dar_es_Salaam",
        "Africa/Djibouti",
        "Africa/Douala",
        "Africa/El_Aaiun",
        "Africa/Freetown",
        "Africa/Gaborone",
        "Africa/Harare",
        "Africa/Johannesburg",
        "Africa/Juba",
        "Africa/Kampala",
        "Africa/Khartoum",
        "Africa/Kigali",
        "Africa/Kinshasa",
        "Africa/Lagos",
        "Africa/Libreville",
        "Africa/Lome",
        "Africa/Luanda",
        "Africa/Lubumbashi",
        "Africa/Lusaka",
        "Africa/Malabo",
        "Africa/Maputo",
        "Africa/Maseru",
        "Africa/Mbabane",
        "Africa/Mogadishu",
        "Africa/Monrovia",
        "Africa/Nairobi",
        "Africa/Ndjamena",
        "Africa/Niamey",
        "Africa/Nouakchott",
        "Africa/Ouagadougou",
        "Africa/Porto-Novo",
        "Africa/Sao_Tome",
        "Africa/Tripoli",
        "Africa/Tunis",
        "Africa/Windhoek",
        "America/Adak",
        "America/Anchorage",
        "America/Anguilla",
        "America/Antigua",
        "America/Araguaina",
        "America/Argentina/Buenos_Aires",
        "America/Argentina/Catamarca",
        "America/Argentina/Cordoba",
        "America/Argentina/Jujuy",
        "America/Argentina/La_Rioja",
        "America/Argentina/Mendoza",
        "America/Argentina/Rio_Gallegos",
        "America/Argentina/Salta",
        "America/Argentina/San_Juan",
        "America/Argentina/San_Luis",
        "America/Argentina/Tucuman",
        "America/Argentina/Ushuaia",
        "America/Aruba",
        "America/Asuncion",
        "America/Atikokan",
        "America/Bahia",
        "America/Bahia_Banderas",
        "America/Barbados",
        "America/Belem",
        "America/Belize",
        "America/Blanc-Sablon",
        "America/Boa_Vista",
        "America/Bogota",
        "America/Boise",
        "America/Cambridge_Bay",
        "America/Campo_Grande",
        "America/Cancun",
        "America/Caracas",
        "America/Cayenne",
        "America/Cayman",
        "America/Chicago",
        "America/Chihuahua",
        "America/Costa_Rica",
        "America/Creston",
        "America/Cuiaba",
        "America/Curacao",
        "America/Danmarkshavn",
        "America/Dawson",
        "America/Dawson_Creek",
        "America/Denver",
        "America/Detroit",
        "America/Dominica",
        "America/Edmonton",
        "America/Eirunepe",
        "America/El_Salvador",
        "America/Fortaleza",
        "America/Glace_Bay",
        "America/Godthab",
        "America/Goose_Bay",
        "America/Grand_Turk",
        "America/Grenada",
        "America/Guadeloupe",
        "America/Guatemala",
        "America/Guayaquil",
        "America/Guyana",
        "America/Halifax",
        "America/Havana",
        "America/Hermosillo",
        "America/Indiana/Indianapolis",
        "America/Indiana/Knox",
        "America/Indiana/Marengo",
        "America/Indiana/Petersburg",
        "America/Indiana/Tell_City",
        "America/Indiana/Vevay",
        "America/Indiana/Vincennes",
        "America/Indiana/Winamac",
        "America/Inuvik",
        "America/Iqaluit",
        "America/Jamaica",
        "America/Juneau",
        "America/Kentucky/Louisville",
        "America/Kentucky/Monticello",
        "America/Kralendijk",
        "America/La_Paz",
        "America/Lima",
        "America/Los_Angeles",
        "America/Lower_Princes",
        "America/Maceio",
        "America/Managua",
        "America/Manaus",
        "America/Marigot",
        "America/Martinique",
        "America/Matamoros",
        "America/Mazatlan",
        "America/Menominee",
        "America/Merida",
        "America/Metlakatla",
        "America/Mexico_City",
        "America/Miquelon",
        "America/Moncton",
        "America/Monterrey",
        "America/Montevideo",
        "America/Montreal",
        "America/Montserrat",
        "America/Nassau",
        "America/New_York",
        "America/Nipigon",
        "America/Nome",
        "America/Noronha",
        "America/North_Dakota/Beulah",
        "America/North_Dakota/Center",
        "America/North_Dakota/New_Salem",
        "America/Ojinaga",
        "America/Panama",
        "America/Pangnirtung",
        "America/Paramaribo",
        "America/Phoenix",
        "America/Port-au-Prince",
        "America/Port_of_Spain",
        "America/Porto_Velho",
        "America/Puerto_Rico",
        "America/Rainy_River",
        "America/Rankin_Inlet",
        "America/Recife",
        "America/Regina",
        "America/Resolute",
        "America/Rio_Branco",
        "America/Santa_Isabel",
        "America/Santarem",
        "America/Santiago",
        "America/Santo_Domingo",
        "America/Sao_Paulo",
        "America/Scoresbysund",
        "America/Sitka",
        "America/St_Barthelemy",
        "America/St_Johns",
        "America/St_Kitts",
        "America/St_Lucia",
        "America/St_Thomas",
        "America/St_Vincent",
        "America/Swift_Current",
        "America/Tegucigalpa",
        "America/Thule",
        "America/Thunder_Bay",
        "America/Tijuana",
        "America/Toronto",
        "America/Tortola",
        "America/Vancouver",
        "America/Whitehorse",
        "America/Winnipeg",
        "America/Yakutat",
        "America/Yellowknife",
        "Antarctica/Casey",
        "Antarctica/Davis",
        "Antarctica/DumontDUrville",
        "Antarctica/Macquarie",
        "Antarctica/Mawson",
        "Antarctica/McMurdo",
        "Antarctica/Palmer",
        "Antarctica/Rothera",
        "Antarctica/Syowa",
        "Antarctica/Vostok",
        "Arctic/Longyearbyen",
        "Asia/Aden",
        "Asia/Almaty",
        "Asia/Amman",
        "Asia/Anadyr",
        "Asia/Aqtau",
        "Asia/Aqtobe",
        "Asia/Ashgabat",
        "Asia/Baghdad",
        "Asia/Bahrain",
        "Asia/Baku",
        "Asia/Bangkok",
        "Asia/Beirut",
        "Asia/Bishkek",
        "Asia/Brunei",
        "Asia/Choibalsan",
        "Asia/Chongqing",
        "Asia/Colombo",
        "Asia/Damascus",
        "Asia/Dhaka",
        "Asia/Dili",
        "Asia/Dubai",
        "Asia/Dushanbe",
        "Asia/Gaza",
        "Asia/Harbin",
        "Asia/Hebron",
        "Asia/Ho_Chi_Minh",
        "Asia/Hong_Kong",
        "Asia/Hovd",
        "Asia/Irkutsk",
        "Asia/Jakarta",
        "Asia/Jayapura",
        "Asia/Jerusalem",
        "Asia/Kabul",
        "Asia/Kamchatka",
        "Asia/Karachi",
        "Asia/Kashgar",
        "Asia/Kathmandu",
        "Asia/Khandyga",
        "Asia/Kolkata",
        "Asia/Krasnoyarsk",
        "Asia/Kuala_Lumpur",
        "Asia/Kuching",
        "Asia/Kuwait",
        "Asia/Macau",
        "Asia/Magadan",
        "Asia/Makassar",
        "Asia/Manila",
        "Asia/Muscat",
        "Asia/Nicosia",
        "Asia/Novokuznetsk",
        "Asia/Novosibirsk",
        "Asia/Omsk",
        "Asia/Oral",
        "Asia/Phnom_Penh",
        "Asia/Pontianak",
        "Asia/Pyongyang",
        "Asia/Qatar",
        "Asia/Qyzylorda",
        "Asia/Rangoon",
        "Asia/Riyadh",
        "Asia/Sakhalin",
        "Asia/Samarkand",
        "Asia/Seoul",
        "Asia/Shanghai",
        "Asia/Singapore",
        "Asia/Taipei",
        "Asia/Tashkent",
        "Asia/Tbilisi",
        "Asia/Tehran",
        "Asia/Thimphu",
        "Asia/Tokyo",
        "Asia/Ulaanbaatar",
        "Asia/Urumqi",
        "Asia/Ust-Nera",
        "Asia/Vientiane",
        "Asia/Vladivostok",
        "Asia/Yakutsk",
        "Asia/Yekaterinburg",
        "Asia/Yerevan",
        "Atlantic/Azores",
        "Atlantic/Bermuda",
        "Atlantic/Canary",
        "Atlantic/Cape_Verde",
        "Atlantic/Faroe",
        "Atlantic/Madeira",
        "Atlantic/Reykjavik",
        "Atlantic/South_Georgia",
        "Atlantic/St_Helena",
        "Atlantic/Stanley",
        "Australia/Adelaide",
        "Australia/Brisbane",
        "Australia/Broken_Hill",
        "Australia/Currie",
        "Australia/Darwin",
        "Australia/Eucla",
        "Australia/Hobart",
        "Australia/Lindeman",
        "Australia/Lord_Howe",
        "Australia/Melbourne",
        "Australia/Perth",
        "Australia/Sydney",
        "Canada/Atlantic",
        "Canada/Central",
        "Canada/Eastern",
        "Canada/Mountain",
        "Canada/Newfoundland",
        "Canada/Pacific",
        "Europe/Amsterdam",
        "Europe/Andorra",
        "Europe/Athens",
        "Europe/Belgrade",
        "Europe/Berlin",
        "Europe/Bratislava",
        "Europe/Brussels",
        "Europe/Bucharest",
        "Europe/Budapest",
        "Europe/Busingen",
        "Europe/Chisinau",
        "Europe/Copenhagen",
        "Europe/Dublin",
        "Europe/Gibraltar",
        "Europe/Guernsey",
        "Europe/Helsinki",
        "Europe/Isle_of_Man",
        "Europe/Istanbul",
        "Europe/Jersey",
        "Europe/Kaliningrad",
        "Europe/Kiev",
        "Europe/Lisbon",
        "Europe/Ljubljana",
        "Europe/London",
        "Europe/Luxembourg",
        "Europe/Madrid",
        "Europe/Malta",
        "Europe/Mariehamn",
        "Europe/Minsk",
        "Europe/Monaco",
        "Europe/Moscow",
        "Europe/Oslo",
        "Europe/Paris",
        "Europe/Podgorica",
        "Europe/Prague",
        "Europe/Riga",
        "Europe/Rome",
        "Europe/Samara",
        "Europe/San_Marino",
        "Europe/Sarajevo",
        "Europe/Simferopol",
        "Europe/Skopje",
        "Europe/Sofia",
        "Europe/Stockholm",
        "Europe/Tallinn",
        "Europe/Tirane",
        "Europe/Uzhgorod",
        "Europe/Vaduz",
        "Europe/Vatican",
        "Europe/Vienna",
        "Europe/Vilnius",
        "Europe/Volgograd",
        "Europe/Warsaw",
        "Europe/Zagreb",
        "Europe/Zaporozhye",
        "Europe/Zurich",
        "GMT",
        "Indian/Antananarivo",
        "Indian/Chagos",
        "Indian/Christmas",
        "Indian/Cocos",
        "Indian/Comoro",
        "Indian/Kerguelen",
        "Indian/Mahe",
        "Indian/Maldives",
        "Indian/Mauritius",
        "Indian/Mayotte",
        "Indian/Reunion",
        "Pacific/Apia",
        "Pacific/Auckland",
        "Pacific/Chatham",
        "Pacific/Chuuk",
        "Pacific/Easter",
        "Pacific/Efate",
        "Pacific/Enderbury",
        "Pacific/Fakaofo",
        "Pacific/Fiji",
        "Pacific/Funafuti",
        "Pacific/Galapagos",
        "Pacific/Gambier",
        "Pacific/Guadalcanal",
        "Pacific/Guam",
        "Pacific/Honolulu",
        "Pacific/Johnston",
        "Pacific/Kiritimati",
        "Pacific/Kosrae",
        "Pacific/Kwajalein",
        "Pacific/Majuro",
        "Pacific/Marquesas",
        "Pacific/Midway",
        "Pacific/Nauru",
        "Pacific/Niue",
        "Pacific/Norfolk",
        "Pacific/Noumea",
        "Pacific/Pago_Pago",
        "Pacific/Palau",
        "Pacific/Pitcairn",
        "Pacific/Pohnpei",
        "Pacific/Port_Moresby",
        "Pacific/Rarotonga",
        "Pacific/Saipan",
        "Pacific/Tahiti",
        "Pacific/Tarawa",
        "Pacific/Tongatapu",
        "Pacific/Wake",
        "Pacific/Wallis",
        "US/Alaska",
        "US/Arizona",
        "US/Central",
        "US/Eastern",
        "US/Hawaii",
        "US/Mountain",
        "US/Pacific",
        "UTC",
      ],
      "Default": "UTC",
      "Description": "Choose the default Time Zone. Default is 'UTC'.",
      "Type": "String",
    },
    "EnableSSMMaintenanceWindows": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Enable the solution to load SSM Maintenance Windows, so that they can be used for EC2 instance Scheduling.",
      "Type": "String",
    },
    "LambdaRolePath": Object {
      "Description": "IAM role path for lambda execution role.",
      "Type": "String",
    },
    "LogRetentionDays": Object {
      "AllowedValues": Array [
        "1",
        "3",
        "5",
        "7",
        "14",
        "14",
        "30",
        "60",
        "90",
        "120",
        "150",
        "180",
        "365",
        "400",
        "545",
        "731",
        "1827",
        "3653",
      ],
      "Default": 30,
      "Description": "Retention days for scheduler logs.",
      "Type": "Number",
    },
    "MemorySize": Object {
      "AllowedValues": Array [
        "128",
        "384",
        "512",
        "640",
        "768",
        "896",
        "1024",
        "1152",
        "1280",
        "1408",
        "1536",
      ],
      "Default": 128,
      "Description": "Size of the Lambda function running the scheduler, increase size when processing large numbers of instances.",
      "Type": "Number",
    },
    "NotificationsTopicArn": Object {
      "Description": "Notifications SNS topic ARN for lambda failures.",
      "Type": "String",
    },
    "Regions": Object {
      "Description": "List of regions in which instances are scheduled, leave blank for current region only.",
      "Type": "CommaDelimitedList",
    },
    "ScheduleLambdaAccount": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Schedule instances in this account.",
      "Type": "String",
    },
    "ScheduleRdsClusters": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Enable scheduling of Aurora clusters for RDS Service.",
      "Type": "String",
    },
    "ScheduledServices": Object {
      "AllowedValues": Array [
        "EC2",
        "RDS",
        "Both",
      ],
      "Default": "EC2",
      "Description": "Scheduled Services.",
      "Type": "String",
    },
    "SchedulerFrequency": Object {
      "AllowedValues": Array [
        "1",
        "2",
        "5",
        "10",
        "15",
        "30",
        "60",
      ],
      "Default": "5",
      "Description": "Scheduler running frequency in minutes.",
      "Type": "String",
    },
    "SchedulingActive": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Activate or deactivate scheduling.",
      "Type": "String",
    },
    "StartedTags": Object {
      "Description": "Comma separated list of tagname and values on the formt name=value,name=value,.. that are set on started instances",
      "Type": "String",
    },
    "StoppedTags": Object {
      "Description": "Comma separated list of tagname and values on the formt name=value,name=value,.. that are set on stopped instances",
      "Type": "String",
    },
    "TagName": Object {
      "Default": "Schedule",
      "Description": "Name of tag to use for associating instance schedule schemas with service instances.",
      "MaxLength": 127,
      "MinLength": 1,
      "Type": "String",
    },
    "Trace": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Enable logging of detailed information in CloudWatch logs.",
      "Type": "String",
    },
    "UseCloudWatchMetrics": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Collect instance scheduling data using CloudWatch metrics.",
      "Type": "String",
    },
  },
  "Resources": Object {
    "ConfigTable": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "type",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "name",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "type",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "name",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "KMSMasterKeyId": Object {
            "Ref": "InstanceSchedulerEncryptionKey",
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "EC2DynamoDBPolicy": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "All policies have been scoped to be as restrictive as possible. This solution needs to access ec2/rds resources across all regions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ssm:GetParameter",
                "ssm:GetParameters",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:ssm:*:\${AWS::AccountId}:parameter/*",
              },
            },
            Object {
              "Action": Array [
                "logs:DescribeLogStreams",
                "rds:DescribeDBClusters",
                "rds:DescribeDBInstances",
                "ec2:DescribeInstances",
                "ec2:DescribeRegions",
                "cloudwatch:PutMetricData",
                "ssm:DescribeMaintenanceWindows",
                "tag:GetResources",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:PutRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/*",
                },
                Object {
                  "Fn::GetAtt": Array [
                    "SchedulerLogGroup",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EC2DynamoDBPolicy",
        "Roles": Array [
          Object {
            "Ref": "SchedulerRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Ec2PermissionsB6E87802": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ec2:ModifyInstanceAttribute",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:ec2:*:\${AWS::AccountId}:instance/*",
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:iam::*:role/*EC2SchedulerCross*",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "Ec2PermissionsB6E87802",
        "Roles": Array [
          Object {
            "Ref": "SchedulerRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstanceSchedulerEncryptionKey": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Key for SNS",
        "EnableKeyRotation": true,
        "Enabled": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::111111111111:root",
                    ],
                  ],
                },
              },
              "Resource": "*",
              "Sid": "default",
            },
            Object {
              "Action": Array [
                "kms:GenerateDataKey*",
                "kms:Decrypt",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "SchedulerRole",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
              "Sid": "Allows use of key",
            },
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::111111111111:root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Delete",
    },
    "InstanceSchedulerEncryptionKeyAlias": Object {
      "Properties": Object {
        "AliasName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "alias/",
              Object {
                "Ref": "AWS::StackName",
              },
              "-instance-scheduler-encryption-key",
            ],
          ],
        },
        "TargetKeyId": Object {
          "Fn::GetAtt": Array [
            "InstanceSchedulerEncryptionKey",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "InstanceSchedulerSnsTopic": Object {
      "Properties": Object {
        "KmsMasterKeyId": Object {
          "Fn::GetAtt": Array [
            "InstanceSchedulerEncryptionKey",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SNS::Topic",
    },
    "Main": Object {
      "DependsOn": Array [
        "EC2DynamoDBPolicy",
        "Ec2PermissionsB6E87802",
        "SchedulerPolicy",
        "SchedulerRDSPolicy2E7C328A",
        "SchedulerRoleDefaultPolicy66F774B8",
        "SchedulerRole",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            Object {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            Object {
              "id": "W92",
              "reason": "Lambda function is only used by the event rule periodically, concurrent calls are very limited.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "solutions-eu-west-1",
          "S3Key": "aws-instance-scheduler/v1.4.0/instance-scheduler.zip",
        },
        "Description": "EC2 and RDS instance scheduler, version v1.4.0",
        "Environment": Object {
          "Variables": Object {
            "ACCOUNT": "111111111111",
            "BOTO_RETRY": "5,10,30,0.25",
            "CONFIG_TABLE": Object {
              "Ref": "ConfigTable",
            },
            "DDB_TABLE_NAME": Object {
              "Ref": "StateTable",
            },
            "ENABLE_SSM_MAINTENANCE_WINDOWS": Object {
              "Fn::FindInMap": Array [
                "mappings",
                "TrueFalse",
                Object {
                  "Ref": "EnableSSMMaintenanceWindows",
                },
              ],
            },
            "ENV_BOTO_RETRY_LOGGING": "FALSE",
            "ISSUES_TOPIC_ARN": Object {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": Object {
              "Ref": "SchedulerLogGroup",
            },
            "MAINTENANCE_WINDOW_TABLE": Object {
              "Ref": "MaintenanceWindowTable",
            },
            "METRICS_URL": Object {
              "Fn::FindInMap": Array [
                "mappings",
                "Settings",
                "MetricsUrl",
              ],
            },
            "SCHEDULER_FREQUENCY": Object {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": Object {
              "Fn::FindInMap": Array [
                "mappings",
                "TrueFalse",
                Object {
                  "Fn::FindInMap": Array [
                    "Send",
                    "AnonymousUsage",
                    "Data",
                  ],
                },
              ],
            },
            "SOLUTION_ID": Object {
              "Fn::FindInMap": Array [
                "mappings",
                "Settings",
                "MetricsSolutionId",
              ],
            },
            "STACK_ID": Object {
              "Ref": "AWS::StackId",
            },
            "STACK_NAME": Object {
              "Ref": "AWS::StackName",
            },
            "START_EC2_BATCH_SIZE": "5",
            "STATE_TABLE": Object {
              "Ref": "StateTable",
            },
            "TAG_NAME": Object {
              "Ref": "TagName",
            },
            "TRACE": Object {
              "Fn::FindInMap": Array [
                "mappings",
                "TrueFalse",
                Object {
                  "Ref": "Trace",
                },
              ],
            },
            "USER_AGENT": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "InstanceScheduler-",
                  Object {
                    "Ref": "AWS::StackName",
                  },
                  "-v1.4.0",
                ],
              ],
            },
            "USER_AGENT_EXTRA": "AwsSolution/SO0030/v1.4.0",
            "UUID_KEY": Object {
              "Fn::FindInMap": Array [
                "Send",
                "ParameterKey",
                "UniqueId",
              ],
            },
          },
        },
        "FunctionName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-InstanceSchedulerMain",
            ],
          ],
        },
        "Handler": "main.lambda_handler",
        "MemorySize": Object {
          "Ref": "MemorySize",
        },
        "Role": Object {
          "Fn::GetAtt": Array [
            "SchedulerRole",
            "Arn",
          ],
        },
        "Runtime": "python3.7",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "MainLambdaFailureAlarm": Object {
      "Properties": Object {
        "AlarmActions": Array [
          Object {
            "Ref": "NotificationsTopicArn",
          },
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": Array [
          Object {
            "Name": "FunctionName",
            "Value": Object {
              "Ref": "Main",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 0,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "MaintenanceWindowTable": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "Name",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "account-region",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "Name",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "account-region",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "KMSMasterKeyId": Object {
            "Ref": "InstanceSchedulerEncryptionKey",
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "SchedulerConfigHelper": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "SchedulerLogGroup",
      ],
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "Main",
            "Arn",
          ],
        },
        "config_table": Object {
          "Ref": "ConfigTable",
        },
        "create_rds_snapshot": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "TrueFalse",
            Object {
              "Ref": "CreateRdsSnapshot",
            },
          ],
        },
        "cross_account_roles": Object {
          "Ref": "CrossAccountRoles",
        },
        "default_timezone": Object {
          "Ref": "DefaultTimezone",
        },
        "enable_SSM_maintenance_windows": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "TrueFalse",
            Object {
              "Ref": "EnableSSMMaintenanceWindows",
            },
          ],
        },
        "log_retention_days": Object {
          "Ref": "LogRetentionDays",
        },
        "regions": Object {
          "Ref": "Regions",
        },
        "schedule_clusters": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "TrueFalse",
            Object {
              "Ref": "ScheduleRdsClusters",
            },
          ],
        },
        "schedule_lambda_account": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "TrueFalse",
            Object {
              "Ref": "ScheduleLambdaAccount",
            },
          ],
        },
        "scheduled_services": Object {
          "Fn::Split": Array [
            ",",
            Object {
              "Fn::FindInMap": Array [
                "mappings",
                "Services",
                Object {
                  "Ref": "ScheduledServices",
                },
              ],
            },
          ],
        },
        "stack_version": "v1.4.0",
        "started_tags": Object {
          "Ref": "StartedTags",
        },
        "stopped_tags": Object {
          "Ref": "StoppedTags",
        },
        "tagname": Object {
          "Ref": "TagName",
        },
        "timeout": 120,
        "trace": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "TrueFalse",
            Object {
              "Ref": "Trace",
            },
          ],
        },
        "use_metrics": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "TrueFalse",
            Object {
              "Ref": "UseCloudWatchMetrics",
            },
          ],
        },
      },
      "Type": "Custom::ServiceSetup",
      "UpdateReplacePolicy": "Delete",
    },
    "SchedulerLogGroup": Object {
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W84",
              "reason": "CloudWatch log groups only have transactional data from the Lambda function, this template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group.",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-logs",
            ],
          ],
        },
        "RetentionInDays": Object {
          "Ref": "LogRetentionDays",
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "SchedulerPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "rds:AddTagsToResource",
                "rds:RemoveTagsFromResource",
                "rds:DescribeDBSnapshots",
                "rds:StartDBInstance",
                "rds:StopDBInstance",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:db:*",
              },
            },
            Object {
              "Action": Array [
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:CreateTags",
                "ec2:DeleteTags",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:ec2:*:\${AWS::AccountId}:instance/*",
              },
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${AWS::StackName}-InstanceSchedulerMain",
              },
            },
            Object {
              "Action": Array [
                "kms:GenerateDataKey*",
                "kms:Decrypt",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulerPolicy",
        "Roles": Array [
          Object {
            "Ref": "SchedulerRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulerRDSPolicy2E7C328A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "rds:DeleteDBSnapshot",
                "rds:DescribeDBSnapshots",
                "rds:StopDBInstance",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:snapshot:*",
              },
            },
            Object {
              "Action": Array [
                "rds:AddTagsToResource",
                "rds:RemoveTagsFromResource",
                "rds:StartDBCluster",
                "rds:StopDBCluster",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:cluster:*",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulerRDSPolicy2E7C328A",
        "Roles": Array [
          Object {
            "Ref": "SchedulerRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulerRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "events.amazonaws.com",
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": Object {
          "Ref": "LambdaRolePath",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SchedulerRoleDefaultPolicy66F774B8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "StateTable",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": Array [
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "MaintenanceWindowTable",
                    "Arn",
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "ssm:PutParameter",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Sub": "arn:\${AWS::Partition}:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/Solutions/aws-instance-scheduler/UUID/*",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulerRoleDefaultPolicy66F774B8",
        "Roles": Array [
          Object {
            "Ref": "SchedulerRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulerRule": Object {
      "Properties": Object {
        "Description": "Instance Scheduler - Rule to trigger instance for scheduler function version v1.4.0",
        "ScheduleExpression": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "Timeouts",
            Object {
              "Ref": "SchedulerFrequency",
            },
          ],
        },
        "State": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "EnabledDisabled",
            Object {
              "Ref": "SchedulingActive",
            },
          ],
        },
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "Main",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "StateTable": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "service",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "account-region",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "service",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "account-region",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "KMSMasterKeyId": Object {
            "Ref": "InstanceSchedulerEncryptionKey",
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "instanceschedulerlambdaLambdaFunctionAwsEventsLambdaInvokePermission1F8E87DF9": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Main",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "SchedulerRule",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "instanceschedulerlambdaLambdaFunctionServiceRoleEBF44CD1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;
